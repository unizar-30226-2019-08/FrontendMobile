def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = 1
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}
//apply plugin: 'kotlin-android'

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    android {
         compileOptions {
             sourceCompatibility 1.8
             targetCompatibility 1.8
         }
     }

    defaultConfig {
        applicationId "es.bookalo.bookalo"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 23
        versionName "0.2"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk{
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.google.firebase:firebase-core:16.0.9'
    implementation 'com.google.firebase:firebase-messaging:18.0.0'
}

apply plugin: 'com.google.gms.google-services'

// Include both 32bit and 64bit arm libflutter.so files into your APK
project.afterEvaluate {
	assembleRelease.doLast {
		String src
		if(project.hasProperty('target-platform') &&
			project.property('target-platform') == 'android-arm64') {
			// If we are building the 64bit then we also want to add the 32bit libflutter.so
			src = "$flutterRoot/bin/cache/artifacts/engine/android-arm-release/flutter.jar"
		}else{
			// If we are building the opposite (32bit), we include the 64bit libflutter.so
			src = "$flutterRoot/bin/cache/artifacts/engine/android-arm64-release/flutter.jar"
		}
		copy {
			from zipTree(src)
			include 'lib/*/libflutter.so'
			into "$buildDir/intermediates/jniLibs/release/0/"
		}
	}
}
